plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.38'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.5'
}

def secrets = new Properties()
if (file("./secrets.properties").exists()) {
    file("./secrets.properties").withInputStream {
        stream -> secrets.load(stream)
    }
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

jarJar.enable()

mixin {
    add sourceSets.main, "create_connected.refmap.json"
    config 'create_connected.mixins.json'
}

// Java version target
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // Minecraft source mapping
    mappings channel: mapping_channel, version: mapping_version

    // Run "prepareX" tasks before game launch
    // enableIdeaPrepareRuns = true

    // Run Gradle's ProcessResources task(s) on IDE output locations before launching the game. REQUIRED
    copyIdeResources = true

    // Enable access transformers for use in development.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"

            //Allows for reloading the project during runtime with compatible jvm
            jvmArg "-XX:+AllowEnhancedClassRedefinition"

            arg '-mixin.config=create_connected.mixins.json'
            arg '-mixin.config=create.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory project.file('run-server')
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'create'
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // Create, Ponder, Flywheel
        url = "https://maven.createmod.net"
    }
    maven {
        // Registrate
        url = "https://maven.tterrag.com"
    }
    maven {
        // ForgeConfigAPIPort
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // maven for Copycats+
        name = "realrobotixCopycats"
        url = "https://maven.realrobotix.me/copycats"
    }
    maven {
        // Conditional Mixin
        name = "ConditionalMixin"
        url 'https://maven.fallenbreath.me/releases'
    }
    maven {
        // Create: Dragons Plus
        name = "DragonsPlusMinecraft"
        url "https://maven.dragons.plus/releases"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "maven.modrinth"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Curse Maven"
                url = "https://cursemaven.com"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "curse.maven"
        }
    }

    // Mod jar dependencies in ./libs
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    implementation(fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false })
    implementation(fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}"))
    compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}"))
    runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}"))
    implementation(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}"))

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

//    implementation("maven.modrinth:create-garnished:${garnished_version}")
//    runtimeOnly("maven.modrinth:create-dreams-and-desires:${dreams_desires_version}")
//    runtimeOnly("plus.dragons.createdragonsplus:create-dragons-plus-${minecraft_version}:${create_dragons_plus_version}")
//    runtimeOnly("maven.modrinth:create-henry:${create_henry_version}")
    implementation(fg.deobf("com.copycatsplus:copycats:${copycats_version}"))
    implementation(fg.deobf("maven.modrinth:additional-placements:${additional_placements_version}"))

//    runtimeOnly("maven.modrinth:adorn:${adorn_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Expands all declared replace properties in the specified resource targets.
tasks.named('processResources', ProcessResources).configure {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            create_version_range   : create_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "create_connected.mixins.json"
        ])
    }

    // Reobfuscate jar file
    finalizedBy 'reobfJar'
}

tasks.jarJar.configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "create_connected.mixins.json"
        ])
    }

    // Reobfuscate jar file
    finalizedBy 'reobfJarJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.publishMods.dependsOn(tasks.assemble)
tasks.publishMods.mustRunAfter(tasks.build)

publishMods {
    changelog = "## NOTE: Create: Connected 1.0.0 or above only works with Create 6.0.0 or above!\n\nCheck out the detailed changelog at https://github.com/hlysine/create_connected/blob/main/CHANGELOG.md"
    type = STABLE
    file = tasks.jarJar.archiveFile
    modLoaders.add("forge")
    modLoaders.add("neoforge")

    github {
        accessToken = secrets.GITHUB_TOKEN
        repository = "hlysine/create_connected"
        commitish = "mc1.20.1/main"
    }

    modrinth {
        accessToken = secrets.MODRINTH_TOKEN
        projectId = "Vg5TIO6d"
        minecraftVersions.add(minecraft_version)

        requires {
            id = "LNytGWDc"
        }
        optional {
            id = "u6dRKJwZ"
        }
    }

    curseforge {
        accessToken = secrets.CURSEFORGE_TOKEN
        projectId = "947914"
        minecraftVersions.add(minecraft_version)
    }
}

wrapper {
    gradleVersion = '8.10'
    distributionType = Wrapper.DistributionType.BIN
}

